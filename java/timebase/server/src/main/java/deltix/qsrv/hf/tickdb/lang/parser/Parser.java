
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jun 24 17:03:13 BRT 2016
//----------------------------------------------------

package deltix.qsrv.hf.tickdb.lang.parser;

import java_cup.runtime.*;
import java.util.*;
import deltix.util.parsers.*;
import deltix.qsrv.hf.tickdb.pub.*;
import deltix.qsrv.hf.tickdb.lang.pub.*;
import deltix.qsrv.hf.tickdb.lang.errors.*;

/** CUP v0.10k generated parser.
  * @version Fri Jun 24 17:03:13 BRT 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\003\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\004\003\000\002\004\007\000" +
    "\002\004\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\010\000\002\004\007\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\006\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\011\002\000\002\011\003\000\002" +
    "\012\003\000\002\012\005\000\002\015\003\000\002\015" +
    "\005\000\002\051\004\000\002\051\002\000\002\052\004" +
    "\000\002\052\002\000\002\053\005\000\002\053\002\000" +
    "\002\007\010\000\002\016\002\000\002\016\004\000\002" +
    "\016\004\000\002\010\007\000\002\006\006\000\002\013" +
    "\003\000\002\013\005\000\002\014\003\000\002\054\003" +
    "\000\002\054\002\000\002\055\003\000\002\055\002\000" +
    "\002\056\003\000\002\056\002\000\002\057\004\000\002" +
    "\057\002\000\002\020\015\000\002\060\003\000\002\060" +
    "\002\000\002\061\003\000\002\061\002\000\002\062\003" +
    "\000\002\062\002\000\002\063\004\000\002\063\002\000" +
    "\002\064\004\000\002\064\002\000\002\021\015\000\002" +
    "\023\003\000\002\023\005\000\002\024\003\000\002\024" +
    "\003\000\002\065\003\000\002\065\002\000\002\025\007" +
    "\000\002\026\003\000\002\026\005\000\002\066\004\000" +
    "\002\066\002\000\002\027\004\000\002\030\003\000\002" +
    "\030\003\000\002\067\003\000\002\067\002\000\002\070" +
    "\004\000\002\070\002\000\002\071\003\000\002\071\002" +
    "\000\002\072\004\000\002\072\002\000\002\031\013\000" +
    "\002\033\003\000\002\033\004\000\002\035\003\000\002" +
    "\035\005\000\002\034\002\000\002\034\003\000\002\036" +
    "\003\000\002\036\003\000\002\073\003\000\002\073\002" +
    "\000\002\074\004\000\002\074\002\000\002\037\011\000" +
    "\002\075\003\000\002\075\002\000\002\076\005\000\002" +
    "\076\002\000\002\077\004\000\002\077\002\000\002\100" +
    "\004\000\002\100\002\000\002\040\010\000\002\050\002" +
    "\000\002\050\006\000\002\047\002\000\002\047\003\000" +
    "\002\047\006\000\002\101\004\000\002\101\002\000\002" +
    "\043\006\000\002\102\004\000\002\102\002\000\002\043" +
    "\007\000\002\103\004\000\002\103\002\000\002\043\007" +
    "\000\002\104\004\000\002\104\002\000\002\043\005\000" +
    "\002\044\003\000\002\044\005\000\002\045\003\000\002" +
    "\045\005\000\002\105\003\000\002\105\002\000\002\106" +
    "\003\000\002\106\002\000\002\107\004\000\002\107\002" +
    "\000\002\032\012\000\002\041\003\000\002\041\005\000" +
    "\002\110\004\000\002\110\002\000\002\042\004\000\002" +
    "\046\003\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\054\006\036\007\012\010\022\030\006\034" +
    "\013\035\043\040\037\041\035\042\017\055\027\073\034" +
    "\075\025\101\015\102\041\103\007\104\026\105\031\106" +
    "\020\107\014\110\033\111\040\001\002\000\004\002\ufffd" +
    "\001\002\000\062\002\ufff8\004\ufff8\011\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\031\ufff8\032\ufff8\034\ufff8\036\ufff8\037\ufff8\045\ufff8\046" +
    "\ufff8\051\ufff8\052\ufff8\064\ufff8\066\ufff8\076\ufff8\100\ufff8" +
    "\001\002\000\126\002\uffc3\004\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\064" +
    "\uffc3\066\uffc3\076\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\001\002\000" +
    "\076\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb" +
    "\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\036\uffdb\037\uffdb\045\uffdb\046\uffdb\051\uffdb\052\uffdb\054" +
    "\uffdb\064\uffdb\066\uffdb\076\uffdb\100\uffdb\001\002\000\076" +
    "\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\015" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\037\uffe3\045\uffe3\046\uffe3\051\uffe3\052\uffe3\054\uffe3" +
    "\064\uffe3\066\uffe3\076\uffe3\100\uffe3\001\002\000\076\002" +
    "\ufffa\004\ufffa\005\104\006\106\007\101\011\ufffa\015\105" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\031\ufffa\032\ufffa\033\107\034\ufffa\036\ufffa" +
    "\037\ufffa\045\ufffa\046\ufffa\051\ufffa\052\ufffa\054\102\064" +
    "\ufffa\066\ufffa\076\ufffa\100\ufffa\001\002\000\076\002\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\015\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037" +
    "\uffd2\045\uffd2\046\uffd2\051\uffd2\052\uffd2\054\uffd2\064\uffd2" +
    "\066\uffd2\076\uffd2\100\uffd2\001\002\000\044\006\036\007" +
    "\012\010\022\030\006\034\013\035\043\040\037\041\035" +
    "\042\017\101\015\102\041\103\007\104\026\105\031\106" +
    "\020\107\014\110\033\001\002\000\076\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\011\uffd6\015\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\045" +
    "\uffd6\046\uffd6\051\uffd6\052\uffd6\054\uffd6\064\uffd6\066\uffd6" +
    "\076\uffd6\100\uffd6\001\002\000\104\002\uff59\004\uff59\005" +
    "\uff59\006\uff59\007\uff59\010\u0108\011\uff59\014\uffbe\015\uff59" +
    "\017\uffbe\020\uff59\021\uff59\022\uff59\023\uff59\024\uff59\025" +
    "\uff59\026\uff59\027\uff59\031\uff59\032\uff59\033\uff59\034\uff59" +
    "\036\uff59\037\uff59\045\uff59\046\uff59\051\uff59\052\uff59\054" +
    "\uff59\064\uff59\066\uff59\076\uff59\100\uff59\001\002\000\076" +
    "\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\015" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\036" +
    "\uffe4\037\uffe4\045\uffe4\046\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\064\uffe4\066\uffe4\076\uffe4\100\uffe4\001\002\000\076\002" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\015\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3" +
    "\037\uffd3\045\uffd3\046\uffd3\051\uffd3\052\uffd3\054\uffd3\064" +
    "\uffd3\066\uffd3\076\uffd3\100\uffd3\001\002\000\076\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\015\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\037" +
    "\uffd8\045\uffd8\046\uffd8\051\uffd8\052\uffd8\054\uffd8\064\uffd8" +
    "\066\uffd8\076\uffd8\100\uffd8\001\002\000\004\002\u0107\001" +
    "\002\000\044\006\036\007\012\010\022\030\006\034\013" +
    "\035\043\040\037\041\035\042\017\101\015\102\041\103" +
    "\007\104\026\105\031\106\020\107\014\110\033\001\002" +
    "\000\004\002\uffff\001\002\000\006\014\u0102\017\114\001" +
    "\002\000\004\056\361\001\002\000\076\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\011\uffda\015\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037\uffda\045" +
    "\uffda\046\uffda\051\uffda\052\uffda\054\uffda\064\uffda\066\uffda" +
    "\076\uffda\100\uffda\001\002\000\006\060\215\061\216\001" +
    "\002\000\076\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\011\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\036\uffd5\037\uffd5\045\uffd5\046\uffd5\051\uffd5\052" +
    "\uffd5\054\uffd5\064\uffd5\066\uffd5\076\uffd5\100\uffd5\001\002" +
    "\000\076\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011" +
    "\uffd9\015\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\036\uffd9\037\uffd9\045\uffd9\046\uffd9\051\uffd9\052\uffd9" +
    "\054\uffd9\064\uffd9\066\uffd9\076\uffd9\100\uffd9\001\002\000" +
    "\004\002\ufffc\001\002\000\076\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\011\uffd7\015\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\045\uffd7\046" +
    "\uffd7\051\uffd7\052\uffd7\054\uffd7\064\uffd7\066\uffd7\076\uffd7" +
    "\100\uffd7\001\002\000\004\056\212\001\002\000\076\002" +
    "\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\015\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4" +
    "\037\uffd4\045\uffd4\046\uffd4\051\uffd4\052\uffd4\054\uffd4\064" +
    "\uffd4\066\uffd4\076\uffd4\100\uffd4\001\002\000\040\006\036" +
    "\007\012\010\022\035\043\040\037\041\035\042\017\101" +
    "\015\102\041\103\007\104\026\105\031\106\020\107\014" +
    "\110\033\001\002\000\004\101\111\001\002\000\010\052" +
    "\140\053\136\101\111\001\002\000\076\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\011\uffdc\015\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\045" +
    "\uffdc\046\uffdc\051\uffdc\052\uffdc\054\uffdc\064\uffdc\066\uffdc" +
    "\076\uffdc\100\uffdc\001\002\000\004\002\ufffb\001\002\000" +
    "\076\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\015\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\036\uffdd\037\uffdd\045\uffdd\046\uffdd\051\uffdd\052\uffdd\054" +
    "\uffdd\064\uffdd\066\uffdd\076\uffdd\100\uffdd\001\002\000\036" +
    "\002\001\020\052\021\051\023\053\024\050\025\057\026" +
    "\055\027\047\034\056\036\045\037\061\045\046\051\054" +
    "\100\060\001\002\000\044\006\036\007\012\010\022\030" +
    "\006\034\013\035\043\040\037\041\035\042\017\101\015" +
    "\102\041\103\007\104\026\105\031\106\020\107\014\110" +
    "\033\001\002\000\004\010\132\001\002\000\044\006\036" +
    "\007\012\010\022\030\006\034\013\035\043\040\037\041" +
    "\035\042\017\101\015\102\041\103\007\104\026\105\031" +
    "\106\020\107\014\110\033\001\002\000\044\006\036\007" +
    "\012\010\022\030\006\034\013\035\043\040\037\041\035" +
    "\042\017\101\015\102\041\103\007\104\026\105\031\106" +
    "\020\107\014\110\033\001\002\000\044\006\036\007\012" +
    "\010\022\030\006\034\013\035\043\040\037\041\035\042" +
    "\017\101\015\102\041\103\007\104\026\105\031\106\020" +
    "\107\014\110\033\001\002\000\044\006\036\007\012\010" +
    "\022\030\006\034\013\035\043\040\037\041\035\042\017" +
    "\101\015\102\041\103\007\104\026\105\031\106\020\107" +
    "\014\110\033\001\002\000\044\006\036\007\012\010\022" +
    "\030\006\034\013\035\043\040\037\041\035\042\017\101" +
    "\015\102\041\103\007\104\026\105\031\106\020\107\014" +
    "\110\033\001\002\000\040\006\036\007\012\010\022\035" +
    "\043\040\037\041\035\042\017\101\015\102\041\103\007" +
    "\104\026\105\031\106\020\107\014\110\033\001\002\000" +
    "\044\006\036\007\012\010\022\030\006\034\013\035\043" +
    "\040\037\041\035\042\017\101\015\102\041\103\007\104" +
    "\026\105\031\106\020\107\014\110\033\001\002\000\006" +
    "\045\066\100\065\001\002\000\044\006\036\007\012\010" +
    "\022\030\006\034\013\035\043\040\037\041\035\042\017" +
    "\101\015\102\041\103\007\104\026\105\031\106\020\107" +
    "\014\110\033\001\002\000\044\006\036\007\012\010\022" +
    "\030\006\034\013\035\043\040\037\041\035\042\017\101" +
    "\015\102\041\103\007\104\026\105\031\106\020\107\014" +
    "\110\033\001\002\000\044\006\036\007\012\010\022\030" +
    "\006\034\013\035\043\040\037\041\035\042\017\101\015" +
    "\102\041\103\007\104\026\105\031\106\020\107\014\110" +
    "\033\001\002\000\062\002\ufff7\004\ufff7\011\ufff7\020\052" +
    "\021\051\022\ufff7\023\053\024\050\025\057\026\055\027" +
    "\ufff7\031\ufff7\032\ufff7\034\056\036\045\037\ufff7\045\046" +
    "\046\ufff7\051\054\052\ufff7\064\ufff7\066\ufff7\076\ufff7\100" +
    "\060\001\002\000\062\002\uffec\004\uffec\011\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\031\uffec\032\uffec\034\uffec\036\uffec\037\uffec\045\uffec" +
    "\046\uffec\051\uffec\052\uffec\064\uffec\066\uffec\076\uffec\100" +
    "\uffec\001\002\000\062\002\ufff0\004\ufff0\011\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\031\ufff0\032\ufff0\034\ufff0\036\ufff0\037\ufff0\045\ufff0" +
    "\046\ufff0\051\ufff0\052\ufff0\064\ufff0\066\ufff0\076\ufff0\100" +
    "\060\001\002\000\044\006\036\007\012\010\022\030\006" +
    "\034\013\035\043\040\037\041\035\042\017\101\015\102" +
    "\041\103\007\104\026\105\031\106\020\107\014\110\033" +
    "\001\002\000\004\010\067\001\002\000\046\006\036\007" +
    "\012\010\022\011\uffd0\030\006\034\013\035\043\040\037" +
    "\041\035\042\017\101\015\102\041\103\007\104\026\105" +
    "\031\106\020\107\014\110\033\001\002\000\062\002\uffcf" +
    "\004\uffcf\011\uffcf\020\uffcf\021\uffcf\022\074\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\034\uffcf" +
    "\036\uffcf\037\uffcf\045\uffcf\046\uffcf\051\uffcf\052\uffcf\064" +
    "\uffcf\066\uffcf\076\uffcf\100\uffcf\001\002\000\062\002\uffce" +
    "\004\uffce\011\uffce\020\052\021\051\022\uffce\023\053\024" +
    "\050\025\057\026\055\027\047\031\uffce\032\uffce\034\056" +
    "\036\045\037\061\045\046\046\uffce\051\054\052\uffce\064" +
    "\uffce\066\uffce\076\uffce\100\060\001\002\000\004\011\073" +
    "\001\002\000\062\002\uffee\004\uffee\011\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\031\uffee\032\uffee\034\uffee\036\uffee\037\uffee\045\uffee\046" +
    "\uffee\051\uffee\052\uffee\064\uffee\066\uffee\076\uffee\100\uffee" +
    "\001\002\000\044\006\036\007\012\010\022\030\006\034" +
    "\013\035\043\040\037\041\035\042\017\101\015\102\041" +
    "\103\007\104\026\105\031\106\020\107\014\110\033\001" +
    "\002\000\062\002\uffcd\004\uffcd\011\uffcd\020\052\021\051" +
    "\022\uffcd\023\053\024\050\025\057\026\055\027\uffcd\031" +
    "\uffcd\032\uffcd\034\056\036\045\037\061\045\046\046\uffcd" +
    "\051\054\052\uffcd\064\uffcd\066\uffcd\076\uffcd\100\060\001" +
    "\002\000\062\002\uffeb\004\uffeb\011\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031" +
    "\uffeb\032\uffeb\034\uffeb\036\uffeb\037\uffeb\045\uffeb\046\uffeb" +
    "\051\uffeb\052\uffeb\064\uffeb\066\uffeb\076\uffeb\100\uffeb\001" +
    "\002\000\062\002\ufff2\004\ufff2\011\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\031" +
    "\ufff2\032\ufff2\034\ufff2\036\ufff2\037\ufff2\045\ufff2\046\ufff2" +
    "\051\ufff2\052\ufff2\064\ufff2\066\ufff2\076\ufff2\100\060\001" +
    "\002\000\020\005\104\006\106\007\101\015\105\033\107" +
    "\036\103\054\102\001\002\000\040\006\036\007\012\010" +
    "\022\035\043\040\037\041\035\042\017\101\015\102\041" +
    "\103\007\104\026\105\031\106\020\107\014\110\033\001" +
    "\002\000\004\101\123\001\002\000\040\006\036\007\012" +
    "\010\022\035\043\040\037\041\035\042\017\101\015\102" +
    "\041\103\007\104\026\105\031\106\020\107\014\110\033" +
    "\001\002\000\040\006\036\007\012\010\022\035\043\040" +
    "\037\041\035\042\017\101\015\102\041\103\007\104\026" +
    "\105\031\106\020\107\014\110\033\001\002\000\040\006" +
    "\036\007\012\010\022\035\043\040\037\041\035\042\017" +
    "\101\015\102\041\103\007\104\026\105\031\106\020\107" +
    "\014\110\033\001\002\000\040\006\036\007\012\010\022" +
    "\035\043\040\037\041\035\042\017\101\015\102\041\103" +
    "\007\104\026\105\031\106\020\107\014\110\033\001\002" +
    "\000\010\034\110\035\112\101\111\001\002\000\004\035" +
    "\116\001\002\000\110\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\015\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\045" +
    "\uffbe\046\uffbe\051\uffbe\052\uffbe\054\uffbe\064\uffbe\066\uffbe" +
    "\071\uffbe\076\uffbe\100\uffbe\101\uffbe\104\uffbe\001\002\000" +
    "\076\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0" +
    "\015\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\036\uffe0\037\uffe0\045\uffe0\046\uffe0\051\uffe0\052\uffe0\054" +
    "\uffe0\064\uffe0\066\uffe0\076\uffe0\100\uffe0\001\002\000\100" +
    "\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\015" +
    "\uffe1\017\114\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\036\uffe1\037\uffe1\045\uffe1\046\uffe1\051\uffe1\052\uffe1" +
    "\054\uffe1\064\uffe1\066\uffe1\076\uffe1\100\uffe1\001\002\000" +
    "\004\101\115\001\002\000\112\002\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\014\uffbd\015\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036" +
    "\uffbd\037\uffbd\045\uffbd\046\uffbd\051\uffbd\052\uffbd\054\uffbd" +
    "\064\uffbd\066\uffbd\071\uffbd\076\uffbd\100\uffbd\101\uffbd\104" +
    "\uffbd\001\002\000\076\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\011\uffdf\015\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\036\uffdf\037\uffdf\045\uffdf\046\uffdf\051" +
    "\uffdf\052\uffdf\054\uffdf\064\uffdf\066\uffdf\076\uffdf\100\uffdf" +
    "\001\002\000\076\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\101\011\uffe7\015\105\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033" +
    "\107\034\uffe7\036\uffe7\037\uffe7\045\uffe7\046\uffe7\051\uffe7" +
    "\052\uffe7\054\102\064\uffe7\066\uffe7\076\uffe7\100\uffe7\001" +
    "\002\000\076\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\107" +
    "\034\uffe5\036\uffe5\037\uffe5\045\uffe5\046\uffe5\051\uffe5\052" +
    "\uffe5\054\102\064\uffe5\066\uffe5\076\uffe5\100\uffe5\001\002" +
    "\000\076\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\101\011" +
    "\uffe8\015\105\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033\107\034" +
    "\uffe8\036\uffe8\037\uffe8\045\uffe8\046\uffe8\051\uffe8\052\uffe8" +
    "\054\102\064\uffe8\066\uffe8\076\uffe8\100\uffe8\001\002\000" +
    "\076\002\ufff9\004\ufff9\005\104\006\106\007\101\011\ufff9" +
    "\015\105\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033\107\034\ufff9" +
    "\036\ufff9\037\ufff9\045\ufff9\046\ufff9\051\ufff9\052\ufff9\054" +
    "\102\064\ufff9\066\ufff9\076\ufff9\100\ufff9\001\002\000\076" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\015" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036" +
    "\uffde\037\uffde\045\uffde\046\uffde\051\uffde\052\uffde\054\uffde" +
    "\064\uffde\066\uffde\076\uffde\100\uffde\001\002\000\076\002" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\015\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\031\uffe6\032\uffe6\033\107\034\uffe6\036\uffe6" +
    "\037\uffe6\045\uffe6\046\uffe6\051\uffe6\052\uffe6\054\102\064" +
    "\uffe6\066\uffe6\076\uffe6\100\uffe6\001\002\000\062\002\uffef" +
    "\004\uffef\011\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032\uffef\034\uffef" +
    "\036\uffef\037\uffef\045\uffef\046\uffef\051\uffef\052\uffef\064" +
    "\uffef\066\uffef\076\uffef\100\060\001\002\000\062\002\ufff4" +
    "\004\ufff4\011\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\031\ufff4\032\ufff4\034\ufff4" +
    "\036\ufff4\037\ufff4\045\ufff4\046\ufff4\051\ufff4\052\ufff4\064" +
    "\ufff4\066\ufff4\076\ufff4\100\060\001\002\000\062\002\ufff3" +
    "\004\ufff3\011\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3\034\ufff3" +
    "\036\ufff3\037\ufff3\045\ufff3\046\ufff3\051\ufff3\052\ufff3\064" +
    "\ufff3\066\ufff3\076\ufff3\100\060\001\002\000\062\002\ufff1" +
    "\004\ufff1\011\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\034\ufff1" +
    "\036\ufff1\037\ufff1\045\ufff1\046\ufff1\051\ufff1\052\ufff1\064" +
    "\ufff1\066\ufff1\076\ufff1\100\060\001\002\000\062\002\uffea" +
    "\004\uffea\011\uffea\020\052\021\051\022\uffea\023\053\024" +
    "\050\025\057\026\055\027\uffea\031\uffea\032\uffea\034\056" +
    "\036\045\037\061\045\046\046\uffea\051\054\052\uffea\064" +
    "\uffea\066\uffea\076\uffea\100\060\001\002\000\046\006\036" +
    "\007\012\010\022\011\uffd0\030\006\034\013\035\043\040" +
    "\037\041\035\042\017\101\015\102\041\103\007\104\026" +
    "\105\031\106\020\107\014\110\033\001\002\000\004\011" +
    "\134\001\002\000\062\002\uffed\004\uffed\011\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\031\uffed\032\uffed\034\uffed\036\uffed\037\uffed\045\uffed" +
    "\046\uffed\051\uffed\052\uffed\064\uffed\066\uffed\076\uffed\100" +
    "\uffed\001\002\000\062\002\ufff6\004\ufff6\011\ufff6\020\052" +
    "\021\051\022\ufff6\023\053\024\050\025\057\026\055\027" +
    "\ufff6\031\ufff6\032\ufff6\034\056\036\ufff6\037\ufff6\045\046" +
    "\046\ufff6\051\ufff6\052\ufff6\064\ufff6\066\ufff6\076\ufff6\100" +
    "\060\001\002\000\004\010\174\001\002\000\006\002\ufffe" +
    "\052\170\001\002\000\004\010\157\001\002\000\030\002" +
    "\uff74\011\uff74\017\114\022\uff74\034\142\051\uff74\052\uff74" +
    "\064\uff74\066\uff74\076\uff74\101\uff74\001\002\000\004\035" +
    "\156\001\002\000\024\002\uff78\011\uff78\022\uff78\051\uff78" +
    "\052\uff78\064\uff78\066\uff78\076\uff78\101\145\001\002\000" +
    "\022\002\uff7a\011\uff7a\022\uff7a\051\151\052\uff7a\064\uff7a" +
    "\066\uff7a\076\uff7a\001\002\000\024\002\uff77\010\146\011" +
    "\uff77\022\uff77\051\uff77\052\uff77\064\uff77\066\uff77\076\uff77" +
    "\001\002\000\004\102\147\001\002\000\004\011\150\001" +
    "\002\000\022\002\uff76\011\uff76\022\uff76\051\uff76\052\uff76" +
    "\064\uff76\066\uff76\076\uff76\001\002\000\044\006\036\007" +
    "\012\010\022\030\006\034\013\035\043\040\037\041\035" +
    "\042\017\101\015\102\041\103\007\104\026\105\031\106" +
    "\020\107\014\110\033\001\002\000\020\002\uff73\011\uff73" +
    "\022\uff73\052\uff73\064\uff73\066\uff73\076\uff73\001\002\000" +
    "\034\020\052\021\051\023\053\024\050\025\057\026\055" +
    "\027\047\034\056\036\154\037\061\045\046\051\054\100" +
    "\060\001\002\000\044\006\036\007\012\010\022\030\006" +
    "\034\013\035\043\040\037\041\035\042\017\101\015\102" +
    "\041\103\007\104\026\105\031\106\020\107\014\110\033" +
    "\001\002\000\052\002\uff79\011\uff79\020\052\021\051\022" +
    "\uff79\023\053\024\050\025\057\026\055\027\ufff6\034\056" +
    "\036\ufff6\037\ufff6\045\046\051\ufff6\052\uff79\064\uff79\066" +
    "\uff79\076\uff79\100\060\001\002\000\024\002\uff75\011\uff75" +
    "\022\uff75\051\uff75\052\uff75\064\uff75\066\uff75\076\uff75\101" +
    "\uff75\001\002\000\010\052\140\053\136\101\111\001\002" +
    "\000\010\011\uff69\022\uff69\052\170\001\002\000\006\011" +
    "\163\022\162\001\002\000\010\052\140\053\136\101\111" +
    "\001\002\000\022\002\uff71\011\uff71\022\uff71\034\164\052" +
    "\uff71\064\uff71\066\uff71\076\uff71\001\002\000\004\035\166" +
    "\001\002\000\020\002\uff70\011\uff70\022\uff70\052\uff70\064" +
    "\uff70\066\uff70\076\uff70\001\002\000\020\002\uff72\011\uff72" +
    "\022\uff72\052\uff72\064\uff72\066\uff72\076\uff72\001\002\000" +
    "\010\011\uff68\022\uff68\052\170\001\002\000\022\002\uff6b" +
    "\011\uff6b\022\uff6b\034\172\052\uff6b\064\uff6b\066\uff6b\076" +
    "\uff6b\001\002\000\020\002\uff6a\011\uff6a\022\uff6a\052\uff6a" +
    "\064\uff6a\066\uff6a\076\uff6a\001\002\000\004\035\173\001" +
    "\002\000\020\002\uff6c\011\uff6c\022\uff6c\052\uff6c\064\uff6c" +
    "\066\uff6c\076\uff6c\001\002\000\004\101\111\001\002\000" +
    "\006\011\200\022\177\001\002\000\010\011\uff67\017\114" +
    "\022\uff67\001\002\000\004\101\111\001\002\000\022\002" +
    "\uff6e\011\uff6e\022\uff6e\034\201\052\uff6e\064\uff6e\066\uff6e" +
    "\076\uff6e\001\002\000\004\035\203\001\002\000\020\002" +
    "\uff6d\011\uff6d\022\uff6d\052\uff6d\064\uff6d\066\uff6d\076\uff6d" +
    "\001\002\000\020\002\uff6f\011\uff6f\022\uff6f\052\uff6f\064" +
    "\uff6f\066\uff6f\076\uff6f\001\002\000\010\011\uff66\017\114" +
    "\022\uff66\001\002\000\006\010\206\017\114\001\002\000" +
    "\046\006\036\007\012\010\022\011\uffd0\030\006\034\013" +
    "\035\043\040\037\041\035\042\017\101\015\102\041\103" +
    "\007\104\026\105\031\106\020\107\014\110\033\001\002" +
    "\000\004\011\210\001\002\000\076\002\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\011\uffc0\015\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\045\uffc0" +
    "\046\uffc0\051\uffc0\052\uffc0\054\uffc0\064\uffc0\066\uffc0\076" +
    "\uffc0\100\uffc0\001\002\000\076\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\101\011\uffe2\015\105\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2" +
    "\032\uffe2\033\107\034\uffe2\036\uffe2\037\uffe2\045\uffe2\046" +
    "\uffe2\051\uffe2\052\uffe2\054\102\064\uffe2\066\uffe2\076\uffe2" +
    "\100\uffe2\001\002\000\004\101\213\001\002\000\024\002" +
    "\uff59\004\uff59\010\uff59\011\uff59\020\uff59\022\uff59\066\uff59" +
    "\076\uff59\104\uff59\001\002\000\004\002\uff58\001\002\000" +
    "\004\056\uffa5\001\002\000\004\056\uffa4\001\002\000\004" +
    "\056\220\001\002\000\004\101\213\001\002\000\006\010" +
    "\uffba\104\222\001\002\000\004\010\uffbb\001\002\000\004" +
    "\010\224\001\002\000\006\062\232\067\230\001\002\000" +
    "\006\004\uff9a\011\uff9a\001\002\000\006\004\uffa7\011\uffa7" +
    "\001\002\000\006\004\334\011\uffb8\001\002\000\004\101" +
    "\111\001\002\000\006\004\uff9b\011\uff9b\001\002\000\004" +
    "\101\111\001\002\000\012\010\uff98\017\114\071\uff98\104" +
    "\234\001\002\000\006\010\uff99\071\uff99\001\002\000\006" +
    "\010\uff96\071\237\001\002\000\004\010\241\001\002\000" +
    "\004\101\111\001\002\000\006\010\uff97\017\114\001\002" +
    "\000\010\011\uff8c\072\245\101\246\001\002\000\006\011" +
    "\uff8e\022\uff8e\001\002\000\004\011\301\001\002\000\006" +
    "\011\uff8a\022\uff8a\001\002\000\004\101\270\001\002\000" +
    "\012\052\uff82\053\uff82\101\uff82\104\253\001\002\000\006" +
    "\011\uff89\022\uff89\001\002\000\006\011\uff8b\022\251\001" +
    "\002\000\006\072\245\101\246\001\002\000\006\011\uff8d" +
    "\022\uff8d\001\002\000\010\052\uff83\053\uff83\101\uff83\001" +
    "\002\000\010\052\140\053\136\101\111\001\002\000\016" +
    "\011\uff80\022\uff80\052\170\064\256\066\uff80\076\uff80\001" +
    "\002\000\004\065\266\001\002\000\012\011\uff7e\022\uff7e" +
    "\066\uff7e\076\260\001\002\000\044\006\036\007\012\010" +
    "\022\030\006\034\013\035\043\040\037\041\035\042\017" +
    "\101\015\102\041\103\007\104\026\105\031\106\020\107" +
    "\014\110\033\001\002\000\010\011\uff7c\022\uff7c\066\262" +
    "\001\002\000\004\104\264\001\002\000\006\011\uff7b\022" +
    "\uff7b\001\002\000\006\011\uff7d\022\uff7d\001\002\000\042" +
    "\011\uff7f\020\052\021\051\022\uff7f\023\053\024\050\025" +
    "\057\026\055\027\047\034\056\036\045\037\061\045\046" +
    "\051\054\066\uff7f\100\060\001\002\000\004\101\213\001" +
    "\002\000\012\011\uff81\022\uff81\066\uff81\076\uff81\001\002" +
    "\000\006\101\uff87\104\271\001\002\000\004\101\uff88\001" +
    "\002\000\004\101\111\001\002\000\006\017\114\020\274" +
    "\001\002\000\044\006\036\007\012\010\022\030\006\034" +
    "\013\035\043\040\037\041\035\042\017\101\015\102\041" +
    "\103\007\104\026\105\031\106\020\107\014\110\033\001" +
    "\002\000\042\011\uff85\020\052\021\051\022\uff85\023\053" +
    "\024\050\025\057\026\055\027\047\034\056\036\045\037" +
    "\061\045\046\051\054\066\276\100\060\001\002\000\004" +
    "\104\300\001\002\000\006\011\uff84\022\uff84\001\002\000" +
    "\006\011\uff86\022\uff86\001\002\000\014\004\uff94\011\uff94" +
    "\034\303\063\305\066\uff94\001\002\000\010\004\uff92\011" +
    "\uff92\066\310\001\002\000\004\063\306\001\002\000\010" +
    "\004\uff95\011\uff95\066\uff95\001\002\000\010\004\uff90\011" +
    "\uff90\066\uff90\001\002\000\010\004\uff8f\011\uff8f\066\uff8f" +
    "\001\002\000\006\004\uff91\011\uff91\001\002\000\004\104" +
    "\311\001\002\000\006\004\uff93\011\uff93\001\002\000\010" +
    "\010\uff64\017\114\104\314\001\002\000\004\010\315\001" +
    "\002\000\004\010\uff65\001\002\000\004\101\213\001\002" +
    "\000\006\011\uff5e\022\uff5e\001\002\000\006\011\325\022" +
    "\324\001\002\000\010\011\uff5b\020\321\022\uff5b\001\002" +
    "\000\044\006\036\007\012\010\022\030\006\034\013\035" +
    "\043\040\037\041\035\042\017\101\015\102\041\103\007" +
    "\104\026\105\031\106\020\107\014\110\033\001\002\000" +
    "\006\011\uff5a\022\uff5a\001\002\000\040\011\uff5c\020\052" +
    "\021\051\022\uff5c\023\053\024\050\025\057\026\055\027" +
    "\047\034\056\036\045\037\061\045\046\051\054\100\060" +
    "\001\002\000\004\101\213\001\002\000\012\004\uff62\011" +
    "\uff62\066\uff62\070\327\001\002\000\010\004\uff60\011\uff60" +
    "\066\331\001\002\000\010\004\uff63\011\uff63\066\uff63\001" +
    "\002\000\006\004\uff5f\011\uff5f\001\002\000\004\104\332" +
    "\001\002\000\006\004\uff61\011\uff61\001\002\000\006\011" +
    "\uff5d\022\uff5d\001\002\000\010\011\uffb9\062\232\067\230" +
    "\001\002\000\004\011\336\001\002\000\010\002\uffb6\057" +
    "\341\066\uffb6\001\002\000\006\002\uffb7\066\uffb7\001\002" +
    "\000\006\002\uffb4\066\356\001\002\000\004\010\342\001" +
    "\002\000\004\101\213\001\002\000\006\004\351\011\uffa2" +
    "\001\002\000\006\004\uffa0\011\uffa0\001\002\000\010\004" +
    "\uff9d\011\uff9d\020\346\001\002\000\044\006\036\007\012" +
    "\010\022\030\006\034\013\035\043\040\037\041\035\042" +
    "\017\101\015\102\041\103\007\104\026\105\031\106\020" +
    "\107\014\110\033\001\002\000\006\004\uff9c\011\uff9c\001" +
    "\002\000\040\004\uff9e\011\uff9e\020\052\021\051\023\053" +
    "\024\050\025\057\026\055\027\047\034\056\036\045\037" +
    "\061\045\046\051\054\100\060\001\002\000\006\011\uffa3" +
    "\101\213\001\002\000\004\011\353\001\002\000\010\002" +
    "\uffa1\066\uffa1\077\uffa1\001\002\000\006\004\uff9f\011\uff9f" +
    "\001\002\000\004\002\uffb3\001\002\000\004\104\357\001" +
    "\002\000\004\002\uffb5\001\002\000\006\004\uffa6\011\uffa6" +
    "\001\002\000\004\101\213\001\002\000\006\010\uffb1\104" +
    "\364\001\002\000\004\010\365\001\002\000\004\010\uffb2" +
    "\001\002\000\006\062\232\067\230\001\002\000\006\004" +
    "\367\011\uffaf\001\002\000\010\011\uffb0\062\232\067\230" +
    "\001\002\000\004\011\371\001\002\000\012\002\uffad\057" +
    "\341\066\uffad\077\uffad\001\002\000\010\002\uffae\066\uffae" +
    "\077\uffae\001\002\000\010\002\uffab\066\374\077\uffab\001" +
    "\002\000\004\104\u0101\001\002\000\006\002\uffa9\077\377" +
    "\001\002\000\004\002\uffa8\001\002\000\004\101\213\001" +
    "\002\000\004\002\uffaa\001\002\000\006\002\uffac\077\uffac" +
    "\001\002\000\004\101\u0103\001\002\000\076\002\uffbc\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\015\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc" +
    "\045\uffbc\046\uffbc\051\uffbc\052\uffbc\054\uffbc\064\uffbc\066" +
    "\uffbc\076\uffbc\100\uffbc\001\002\000\076\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\011\uffe9\015\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\037\uffe9\045" +
    "\uffe9\046\uffe9\051\uffe9\052\uffe9\054\uffe9\064\uffe9\066\uffe9" +
    "\076\uffe9\100\uffe9\001\002\000\036\011\u0106\020\052\021" +
    "\051\023\053\024\050\025\057\026\055\027\047\034\056" +
    "\036\045\037\061\045\046\051\054\100\060\001\002\000" +
    "\076\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\015\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\036\uffd1\037\uffd1\045\uffd1\046\uffd1\051\uffd1\052\uffd1\054" +
    "\uffd1\064\uffd1\066\uffd1\076\uffd1\100\uffd1\001\002\000\004" +
    "\002\000\001\002\000\046\006\036\007\012\010\022\011" +
    "\uffd0\030\006\034\013\035\043\040\037\041\035\042\017" +
    "\101\015\102\041\103\007\104\026\105\031\106\020\107" +
    "\014\110\033\001\002\000\004\011\u010a\001\002\000\076" +
    "\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\015" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\036" +
    "\uffbf\037\uffbf\045\uffbf\046\uffbf\051\uffbf\052\uffbf\054\uffbf" +
    "\064\uffbf\066\uffbf\076\uffbf\100\uffbf\001\002\000\062\002" +
    "\ufff5\004\ufff5\011\ufff5\020\052\021\051\022\ufff5\023\053" +
    "\024\050\025\057\026\055\027\ufff5\031\ufff5\032\ufff5\034" +
    "\056\036\ufff5\037\ufff5\045\046\046\ufff5\051\ufff5\052\ufff5" +
    "\064\ufff5\066\ufff5\076\ufff5\100\060\001\002\000\126\002" +
    "\uffd0\004\uffd0\006\036\007\012\010\022\011\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\006\031\uffd0\032\uffd0\034\013\035\043\036\uffd0" +
    "\037\uffd0\040\037\041\035\042\017\043\u010e\045\uffd0\046" +
    "\uffd0\050\u010d\051\uffd0\052\uffd0\064\uffd0\066\uffd0\076\uffd0" +
    "\100\uffd0\101\015\102\041\103\007\104\026\105\031\106" +
    "\020\107\014\110\033\001\002\000\126\002\uffc1\004\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\064\uffc1\066\uffc1\076\uffc1\100\uffc1\101" +
    "\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1" +
    "\110\uffc1\001\002\000\126\002\uffc2\004\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\064\uffc2\066\uffc2\076\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\001" +
    "\002\000\062\002\uffc9\004\uffc9\011\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031" +
    "\uffc9\032\u0110\034\uffc9\036\uffc9\037\uffc9\045\uffc9\046\uffc9" +
    "\051\uffc9\052\uffc9\064\uffc9\066\uffc9\076\uffc9\100\uffc9\001" +
    "\002\000\044\006\036\007\012\010\022\030\006\034\013" +
    "\035\043\040\037\041\035\042\017\101\015\102\041\103" +
    "\007\104\026\105\031\106\020\107\014\110\033\001\002" +
    "\000\062\002\uffc7\004\uffc7\011\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\u0112" +
    "\032\uffc7\034\uffc7\036\uffc7\037\uffc7\045\uffc7\046\uffc7\051" +
    "\uffc7\052\uffc7\064\uffc7\066\uffc7\076\uffc7\100\uffc7\001\002" +
    "\000\044\006\036\007\012\010\022\030\006\034\013\035" +
    "\043\040\037\041\035\042\017\101\015\102\041\103\007" +
    "\104\026\105\031\106\020\107\014\110\033\001\002\000" +
    "\062\002\uffc5\004\uffc5\011\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032" +
    "\uffc5\034\uffc5\036\uffc5\037\uffc5\045\uffc5\046\u0115\051\uffc5" +
    "\052\uffc5\064\uffc5\066\uffc5\076\uffc5\100\uffc5\001\002\000" +
    "\062\002\uffc4\004\uffc4\011\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032" +
    "\uffc4\034\uffc4\036\uffc4\037\uffc4\045\uffc4\046\uffc4\051\uffc4" +
    "\052\uffc4\064\uffc4\066\uffc4\076\uffc4\100\uffc4\001\002\000" +
    "\004\047\u0116\001\002\000\004\101\u0103\001\002\000\062" +
    "\002\uffc6\004\uffc6\011\uffc6\020\uffc6\021\uffc6\022\u0119\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\034\uffc6\036\uffc6\037\uffc6\045\uffc6\046\uffc6\051\uffc6\052" +
    "\uffc6\064\uffc6\066\uffc6\076\uffc6\100\uffc6\001\002\000\062" +
    "\002\uffcc\004\uffcc\011\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\034\uffcc\036\uffcc\037\uffcc\045\uffcc\046\uffcc\051\uffcc\052" +
    "\uffcc\064\uffcc\066\uffcc\076\uffcc\100\uffcc\001\002\000\004" +
    "\101\u0103\001\002\000\062\002\uffcb\004\uffcb\011\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\031\uffcb\032\uffcb\034\uffcb\036\uffcb\037\uffcb\045" +
    "\uffcb\046\uffcb\051\uffcb\052\uffcb\064\uffcb\066\uffcb\076\uffcb" +
    "\100\uffcb\001\002\000\062\002\uffc8\004\uffc8\011\uffc8\020" +
    "\052\021\051\022\uffc8\023\053\024\050\025\057\026\055" +
    "\027\uffc8\031\uffc8\032\uffc8\034\056\036\045\037\061\045" +
    "\046\046\uffc8\051\054\052\uffc8\064\uffc8\066\uffc8\076\uffc8" +
    "\100\060\001\002\000\062\002\uffca\004\uffca\011\uffca\020" +
    "\052\021\051\022\uffca\023\053\024\050\025\057\026\055" +
    "\027\uffca\031\uffca\032\uffca\034\056\036\045\037\061\045" +
    "\046\046\uffca\051\054\052\uffca\064\uffca\066\uffca\076\uffca" +
    "\100\060\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\032\003\020\004\043\005\010\006\007\007" +
    "\004\010\015\013\023\017\022\020\003\021\031\022\041" +
    "\046\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u010b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\u010a\005" +
    "\010\006\007\007\004\010\015\013\023\046\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\u0104\005\010\006\007\007\004\010\015\013\023\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\210\006\007\010\015\013\023\046\027\001\001\000\004" +
    "\013\204\001\001\000\006\013\140\043\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\134\005\010\006\007\007\004\010" +
    "\015\013\023\046\027\001\001\000\002\001\001\000\020" +
    "\004\130\005\010\006\007\007\004\010\015\013\023\046" +
    "\027\001\001\000\020\004\127\005\010\006\007\007\004" +
    "\010\015\013\023\046\027\001\001\000\020\004\126\005" +
    "\010\006\007\007\004\010\015\013\023\046\027\001\001" +
    "\000\020\004\125\005\010\006\007\007\004\010\015\013" +
    "\023\046\027\001\001\000\020\004\124\005\010\006\007" +
    "\007\004\010\015\013\023\046\027\001\001\000\014\005" +
    "\077\006\007\010\015\013\023\046\027\001\001\000\020" +
    "\004\076\005\010\006\007\007\004\010\015\013\023\046" +
    "\027\001\001\000\002\001\001\000\020\004\063\005\010" +
    "\006\007\007\004\010\015\013\023\046\027\001\001\000" +
    "\020\004\062\005\010\006\007\007\004\010\015\013\023" +
    "\046\027\001\001\000\020\004\061\005\010\006\007\007" +
    "\004\010\015\013\023\046\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\075\005" +
    "\010\006\007\007\004\010\015\013\023\046\027\001\001" +
    "\000\002\001\001\000\024\004\070\005\010\006\007\007" +
    "\004\010\015\011\071\012\067\013\023\046\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\074\005\010\006\007\007\004" +
    "\010\015\013\023\046\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\123\006\007\010\015\013\023\046\027\001\001\000" +
    "\002\001\001\000\014\005\121\006\007\010\015\013\023" +
    "\046\027\001\001\000\014\005\120\006\007\010\015\013" +
    "\023\046\027\001\001\000\014\005\117\006\007\010\015" +
    "\013\023\046\027\001\001\000\014\005\116\006\007\010" +
    "\015\013\023\046\027\001\001\000\004\013\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\070\005\010" +
    "\006\007\007\004\010\015\011\132\012\067\013\023\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\142\001\001\000\002\001\001\000\004" +
    "\047\143\001\001\000\004\050\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\152\005\010\006\007\007\004\010\015\013" +
    "\023\046\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\154\005\010\006\007\007\004\010\015\013" +
    "\023\046\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\140\043\157\044\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\140\043\166\001\001" +
    "\000\004\102\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\175\045\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\203\001\001\000\004\103" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\070\005\010\006\007\007\004\010\015\011\206\012\067" +
    "\013\023\046\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\220\001\001\000\004" +
    "\054\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\226\030\225\031\230\032\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\334\001\001\000" +
    "\004\013\311\001\001\000\002\001\001\000\004\013\232" +
    "\001\001\000\004\067\234\001\001\000\002\001\001\000" +
    "\004\070\235\001\001\000\002\001\001\000\004\013\237" +
    "\001\001\000\002\001\001\000\014\034\242\035\247\036" +
    "\241\037\243\040\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\036\251\037\243\040\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\140\043\254\001\001\000\004" +
    "\076\256\001\001\000\002\001\001\000\004\077\260\001" +
    "\001\000\020\004\264\005\010\006\007\007\004\010\015" +
    "\013\023\046\027\001\001\000\004\100\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\266\001\001\000\002\001\001\000" +
    "\004\073\271\001\001\000\002\001\001\000\004\013\272" +
    "\001\001\000\002\001\001\000\020\004\274\005\010\006" +
    "\007\007\004\010\015\013\023\046\027\001\001\000\004" +
    "\074\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\303\071\301\001\001\000\004" +
    "\072\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\316\042\315" +
    "\046\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\110\321\001\001\000\020\004\322\005\010\006\007" +
    "\007\004\010\015\013\023\046\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\332\046\317\001\001" +
    "\000\004\106\325\001\001\000\004\107\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\357\031\230\032" +
    "\224\001\001\000\002\001\001\000\006\025\336\056\337" +
    "\001\001\000\002\001\001\000\004\057\354\001\001\000" +
    "\002\001\001\000\010\026\342\027\343\046\344\001\001" +
    "\000\004\065\351\001\001\000\002\001\001\000\004\066" +
    "\346\001\001\000\020\004\347\005\010\006\007\007\004" +
    "\010\015\013\023\046\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\353\046\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\361\001\001\000\004\060\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\365\030\225" +
    "\031\230\032\224\001\001\000\004\061\367\001\001\000" +
    "\010\030\357\031\230\032\224\001\001\000\002\001\001" +
    "\000\006\025\371\062\372\001\001\000\002\001\001\000" +
    "\004\063\374\001\001\000\002\001\001\000\004\064\375" +
    "\001\001\000\002\001\001\000\004\046\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\070\005\010" +
    "\006\007\007\004\010\015\011\u0108\012\067\013\023\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\070\005\010\006\007\007\004\010" +
    "\015\011\u010e\012\067\013\023\046\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0110\001\001\000" +
    "\020\004\u011b\005\010\006\007\007\004\010\015\013\023" +
    "\046\027\001\001\000\004\052\u0112\001\001\000\020\004" +
    "\u011a\005\010\006\007\007\004\010\015\013\023\046\027" +
    "\001\001\000\004\053\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u0117\015\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void     syntax_error (Symbol token) {
        throw new SyntaxErrorException (Location.combine (token.left, token.right));
    }

    @Override
    public void     unrecovered_syntax_error (Symbol token) {
        syntax_error (token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings ("unchecked") class CUP$Parser$actions {


    private static long lx (long a, long b) { return (Location.combine (a, b)); }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Drop_Stream_Statement ::= DROP STREAM Identifier 
            {
              DropStreamStatement RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new DropStreamStatement (lx (dleft, idright), id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*Drop_Stream_Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Identifier (lx (idleft, idright), id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*Identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Enum_Value ::= Identifier _aux_32 
            {
              EnumValueDef RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
            RESULT = 
                new EnumValueDef (
                    lx (idleft, valueright),
                    id, (Expression) value
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*Enum_Value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // _aux_32 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(70/*_aux_32*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // _aux_32 ::= EQ Expression 
            {
              Object RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = value; 
              CUP$Parser$result = new java_cup.runtime.Symbol(70/*_aux_32*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Enumeration ::= Enumeration COMMA Enum_Value 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList e = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		EnumValueDef ev = (EnumValueDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            e.add (ev);
            RESULT = e;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*Enumeration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Enumeration ::= Enum_Value 
            {
              ArrayList RESULT = null;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		EnumValueDef ev = (EnumValueDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new ArrayList ();
            RESULT.add (ev);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*Enumeration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Enumerated_Type_Definition ::= ENUM Type_Id _aux_29 LPAREN Enumeration RPAREN _aux_30 _aux_31 
            {
              EnumClassDef RESULT = null;
		int ekleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int ekright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object ek = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TypeIdentifier id = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList e = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int flagsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flagsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object flags = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object comment = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            EnumValueDef []     values = new EnumValueDef [e.size ()];
            e.toArray (values);

            RESULT =
                new EnumClassDef (
                    lx (ekleft, commentright),
                    id, (String) title, (String) comment,
                    flags != null,
                    values
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*Enumerated_Type_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // _aux_31 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(69/*_aux_31*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // _aux_31 ::= COMMENT STRING 
            {
              Object RESULT = null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = comment; 
              CUP$Parser$result = new java_cup.runtime.Symbol(69/*_aux_31*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // _aux_30 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(68/*_aux_30*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // _aux_30 ::= FLAGS 
            {
              Object RESULT = null;
		int flagsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int flagsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object flags = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = Boolean.TRUE; 
              CUP$Parser$result = new java_cup.runtime.Symbol(68/*_aux_30*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // _aux_29 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(67/*_aux_29*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // _aux_29 ::= STRING 
            {
              Object RESULT = null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = title; 
              CUP$Parser$result = new java_cup.runtime.Symbol(67/*_aux_29*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Object_Content_DataType_List ::= Object_Content_DataType_List COMMA Type_Id 
            {
              ArrayList RESULT = null;
		int objlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int objlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList objlist = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TypeIdentifier tid = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            objlist.add(
                new SimpleDataTypeSpec(
                    lx(tidleft, tidright), tid, true, null, SimpleDataTypeSpec.NO_DIMENSION, null, null)
            );
            RESULT = objlist;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*Object_Content_DataType_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Object_Content_DataType_List ::= Type_Id 
            {
              ArrayList RESULT = null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TypeIdentifier tid = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new ArrayList();
            RESULT.add(
                new SimpleDataTypeSpec(
                    lx(tidleft, tidright), tid, true, null, SimpleDataTypeSpec.NO_DIMENSION, null, null)
            );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*Object_Content_DataType_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Data_Type_List ::= Data_Type_List COMMA Data_Type 
            {
              ArrayList RESULT = null;
		int dtlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList dtlist = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DataTypeSpec dt = (DataTypeSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 dtlist.add(dt); RESULT = dtlist; 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*Data_Type_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Data_Type_List ::= Data_Type 
            {
              ArrayList RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DataTypeSpec dt = (DataTypeSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArrayList(); RESULT.add(dt); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*Data_Type_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Data_Type ::= Data_Type ARRAY _aux_28 
            {
              DataTypeSpec RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DataTypeSpec dt = (DataTypeSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nn3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nn3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object nn3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if (true)
                throw new SyntaxErrorException(
                    "Deprecated syntax. Use 'ARRAY (type1, type2, ...)' construction.",
                    lx (dtleft, nn3right));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*Data_Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // _aux_28 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(66/*_aux_28*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // _aux_28 ::= NOT NULL 
            {
              Object RESULT = null;
		 RESULT = ""; 
              CUP$Parser$result = new java_cup.runtime.Symbol(66/*_aux_28*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Data_Type ::= OBJECT LPAREN Object_Content_DataType_List RPAREN _aux_27 
            {
              DataTypeSpec RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int objlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int objlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList objlist = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nn2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nn2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object nn2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new ClassDataTypeSpec(
                    lx(oleft, nn2right),
                    (DataTypeSpec[]) objlist.toArray(new DataTypeSpec[objlist.size()]),
                    nn2 == null
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*Data_Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // _aux_27 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(65/*_aux_27*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // _aux_27 ::= NOT NULL 
            {
              Object RESULT = null;
		 RESULT = ""; 
              CUP$Parser$result = new java_cup.runtime.Symbol(65/*_aux_27*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Data_Type ::= ARRAY LPAREN Data_Type_List RPAREN _aux_26 
            {
              DataTypeSpec RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList dtlist = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nn1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nn1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object nn1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new ArrayDataTypeSpec(
                    lx(aleft, nn1right),
                    (DataTypeSpec[]) dtlist.toArray(new DataTypeSpec[dtlist.size()]),
                    nn1 == null
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*Data_Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // _aux_26 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(64/*_aux_26*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // _aux_26 ::= NOT NULL 
            {
              Object RESULT = null;
		 RESULT = ""; 
              CUP$Parser$result = new java_cup.runtime.Symbol(64/*_aux_26*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Data_Type ::= Type_Id _aux_25 Encoding_Info Limits 
            {
              DataTypeSpec RESULT = null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeIdentifier tid = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object nn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		EncodingInfo ei = (EncodingInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int limleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int limright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression[] lim = (Expression[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
            RESULT = 
                new SimpleDataTypeSpec (
                    lx (tidleft, limright), 
                    tid, 
                    nn == null,
                    ei.encoding, 
                    ei.dimension,
                    lim [0],
                    lim [1]
                ); 
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*Data_Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // _aux_25 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(63/*_aux_25*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // _aux_25 ::= NOT NULL 
            {
              Object RESULT = null;
		 RESULT = ""; 
              CUP$Parser$result = new java_cup.runtime.Symbol(63/*_aux_25*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Encoding_Info ::= IDENTIFIER LPAREN UINT RPAREN 
            {
              EncodingInfo RESULT = null;
		int encleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int encright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String enc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String dim = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new EncodingInfo (enc, Integer.parseInt (dim)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*Encoding_Info*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Encoding_Info ::= IDENTIFIER 
            {
              EncodingInfo RESULT = null;
		int encleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int encright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String enc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new EncodingInfo (enc, SimpleDataTypeSpec.NO_DIMENSION); 
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*Encoding_Info*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Encoding_Info ::= 
            {
              EncodingInfo RESULT = null;
		 RESULT = new EncodingInfo (null, SimpleDataTypeSpec.NO_DIMENSION); 
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*Encoding_Info*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Limits ::= BETWEEN Expression AND Expression 
            {
              Expression[] RESULT = null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression min = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression max = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expression [] { min, max }; 
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*Limits*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Limits ::= 
            {
              Expression[] RESULT = null;
		 RESULT = new Expression [] { null, null }; 
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*Limits*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Non_Static_Attribute_Definition ::= IDENTIFIER _aux_21 Data_Type _aux_22 _aux_23 _aux_24 
            {
              NonStaticAttributeDef RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		DataTypeSpec dt = (DataTypeSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int relidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int relidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object relid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int defvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int defvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object defval = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object comment = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = 
                new NonStaticAttributeDef (
                    lx (idleft, commentright),
                    id, (String) title, (String) comment, 
                    dt,
                    (Identifier) relid,
                    (Expression) defval
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*Non_Static_Attribute_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // _aux_24 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(62/*_aux_24*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // _aux_24 ::= COMMENT STRING 
            {
              Object RESULT = null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = comment; 
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*_aux_24*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // _aux_23 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(61/*_aux_23*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // _aux_23 ::= DEFAULT Expression 
            {
              Object RESULT = null;
		int defvalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int defvalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression defval = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = defval; 
              CUP$Parser$result = new java_cup.runtime.Symbol(61/*_aux_23*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // _aux_22 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(60/*_aux_22*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // _aux_22 ::= RELATIVE TO Identifier 
            {
              Object RESULT = null;
		int relidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int relidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Identifier relid = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = relid; 
              CUP$Parser$result = new java_cup.runtime.Symbol(60/*_aux_22*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // _aux_21 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(59/*_aux_21*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // _aux_21 ::= STRING 
            {
              Object RESULT = null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = title; 
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*_aux_21*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Static_Attribute_Definition ::= STATIC IDENTIFIER _aux_19 Type_Id EQ Expression _aux_20 
            {
              StaticAttributeDef RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeIdentifier tid = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object comment = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		            
            RESULT = 
                new StaticAttributeDef (
                    lx (sleft, commentright),
                    id, (String) title, (String) comment, tid, e
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*Static_Attribute_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // _aux_20 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(58/*_aux_20*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // _aux_20 ::= COMMENT STRING 
            {
              Object RESULT = null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = comment; 
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*_aux_20*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // _aux_19 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(57/*_aux_19*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // _aux_19 ::= STRING 
            {
              Object RESULT = null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = title; 
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*_aux_19*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Attribute_Definition ::= Non_Static_Attribute_Definition 
            {
              AttributeDef RESULT = null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		NonStaticAttributeDef ad = (NonStaticAttributeDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = ad; 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*Attribute_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Attribute_Definition ::= Static_Attribute_Definition 
            {
              AttributeDef RESULT = null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		StaticAttributeDef ad = (StaticAttributeDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = ad; 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*Attribute_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Attribute_Definition_List ::= Non_Empty_Attribute_Definition_List 
            {
              AttributeDef[] RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new AttributeDef [list.size ()];
            list.toArray (RESULT);            
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*Attribute_Definition_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Attribute_Definition_List ::= 
            {
              AttributeDef[] RESULT = null;
		 RESULT = new AttributeDef [0]; 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*Attribute_Definition_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Non_Empty_Attribute_Definition_List ::= Non_Empty_Attribute_Definition_List COMMA Attribute_Definition 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int adefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int adefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		AttributeDef adef = (AttributeDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add (adef); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*Non_Empty_Attribute_Definition_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Non_Empty_Attribute_Definition_List ::= Attribute_Definition 
            {
              ArrayList RESULT = null;
		int adefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int adefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		AttributeDef adef = (AttributeDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArrayList (); RESULT.add (adef); 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*Non_Empty_Attribute_Definition_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Instantiable_Clause ::= NOT INSTANTIABLE 
            {
              Boolean RESULT = null;
		 RESULT = Boolean.FALSE; 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*Instantiable_Clause*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Instantiable_Clause ::= INSTANTIABLE 
            {
              Boolean RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*Instantiable_Clause*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Class_Type_Definition ::= CLASS Type_Id _aux_15 _aux_16 LPAREN Attribute_Definition_List RPAREN _aux_17 _aux_18 
            {
              RecordClassDef RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeIdentifier id = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int supleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int supright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object sup = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AttributeDef[] attrs = (AttributeDef[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object comment = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		          
            RESULT = 
                new RecordClassDef (
                    lx (tleft, commentright),
                    id, (String) title, (String) comment,
                    inst == null, 
                    (TypeIdentifier) sup,
                    attrs
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*Class_Type_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // _aux_18 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(56/*_aux_18*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // _aux_18 ::= COMMENT STRING 
            {
              Object RESULT = null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = comment; 
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*_aux_18*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // _aux_17 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(55/*_aux_17*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // _aux_17 ::= Instantiable_Clause 
            {
              Object RESULT = null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Boolean inst = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = inst; 
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*_aux_17*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // _aux_16 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(54/*_aux_16*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // _aux_16 ::= UNDER Type_Id 
            {
              Object RESULT = null;
		int supleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int supright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TypeIdentifier sup = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = sup; 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*_aux_16*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // _aux_15 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(53/*_aux_15*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // _aux_15 ::= STRING 
            {
              Object RESULT = null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = title; 
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*_aux_15*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Stream_Member_Definition ::= Enumerated_Type_Definition 
            {
              ClassDef RESULT = null;
		int etdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int etdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		EnumClassDef etd = (EnumClassDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = etd; 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*Stream_Member_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Stream_Member_Definition ::= Class_Type_Definition 
            {
              ClassDef RESULT = null;
		int ctdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int ctdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		RecordClassDef ctd = (RecordClassDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = ctd; 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*Stream_Member_Definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Option ::= Identifier _aux_14 
            {
              OptionElement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
            RESULT = new OptionElement (lx (idleft, valueright), id, (Expression) value); 
        
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Option*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // _aux_14 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(52/*_aux_14*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // _aux_14 ::= EQ Expression 
            {
              Object RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = value; 
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*_aux_14*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Option_List ::= Option_List SEMICOLON Option 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		OptionElement o = (OptionElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            list.add (o);
            RESULT = list;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*Option_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Option_List ::= Option 
            {
              ArrayList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		OptionElement o = (OptionElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new ArrayList ();
            RESULT.add (o);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*Option_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Options ::= OPTIONS LPAREN Option_List _aux_13 RPAREN 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*Options*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // _aux_13 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(51/*_aux_13*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // _aux_13 ::= SEMICOLON 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(51/*_aux_13*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stream_Scope ::= DURABLE 
            {
              StreamScope RESULT = null;
		 RESULT = StreamScope.DURABLE; 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Stream_Scope*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stream_Scope ::= TRANSIENT 
            {
              StreamScope RESULT = null;
		 RESULT = StreamScope.TRANSIENT; 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*Stream_Scope*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stream_Member_List ::= Stream_Member_List SEMICOLON Stream_Member_Definition 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ClassDef def = (ClassDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add (def); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*Stream_Member_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stream_Member_List ::= Stream_Member_Definition 
            {
              ArrayList RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ClassDef def = (ClassDef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArrayList (); RESULT.add (def); 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*Stream_Member_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Modify_Stream_Statement ::= MODIFY STREAM Identifier _aux_8 LPAREN Stream_Member_List _aux_9 RPAREN _aux_10 _aux_11 _aux_12 
            {
              ModifyStreamStatement RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList members = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int optionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int optionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object options = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object comment = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int confirmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int confirmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object confirm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = 
                new ModifyStreamStatement (
                    lx (mleft, confirmright), 
                    id, (String) title, (String) comment, 
                    OptionElement.toArray ((List) options), 
                    ClassDef.toArray (members),
                    ConversionConfirmation.fromId ((Identifier) confirm)
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*Modify_Stream_Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _aux_12 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(50/*_aux_12*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _aux_12 ::= CONFIRM Identifier 
            {
              Object RESULT = null;
		int confirmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int confirmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Identifier confirm = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = confirm; 
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*_aux_12*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _aux_11 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(49/*_aux_11*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // _aux_11 ::= COMMENT STRING 
            {
              Object RESULT = null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = comment; 
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*_aux_11*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // _aux_10 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(48/*_aux_10*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // _aux_10 ::= Options 
            {
              Object RESULT = null;
		int optionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int optionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ArrayList options = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = options; 
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*_aux_10*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // _aux_9 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(47/*_aux_9*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // _aux_9 ::= SEMICOLON 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(47/*_aux_9*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // _aux_8 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(46/*_aux_8*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _aux_8 ::= STRING 
            {
              Object RESULT = null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = title; 
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*_aux_8*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Create_Stream_Statement ::= CREATE Stream_Scope STREAM Identifier _aux_4 LPAREN Stream_Member_List _aux_5 RPAREN _aux_6 _aux_7 
            {
              CreateStreamStatement RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int scopeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int scoperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		StreamScope scope = (StreamScope)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int membersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int membersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList members = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int optionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int optionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object options = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object comment = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = 
                new CreateStreamStatement (
                    lx (cleft, commentright), 
                    id, (String) title, (String) comment, scope, 
                    OptionElement.toArray ((List) options), 
                    ClassDef.toArray (members)
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*Create_Stream_Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _aux_7 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(45/*_aux_7*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _aux_7 ::= COMMENT STRING 
            {
              Object RESULT = null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = comment; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*_aux_7*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _aux_6 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(44/*_aux_6*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _aux_6 ::= Options 
            {
              Object RESULT = null;
		int optionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int optionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ArrayList options = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = options; 
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*_aux_6*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _aux_5 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*_aux_5*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _aux_5 ::= SEMICOLON 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*_aux_5*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _aux_4 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(42/*_aux_4*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _aux_4 ::= STRING 
            {
              Object RESULT = null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = title; 
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*_aux_4*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Field_Id ::= IDENTIFIER 
            {
              FieldIdentifier RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FieldIdentifier (lx (idleft, idright), id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*Field_Id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Type_Id ::= Type_Id DOT IDENTIFIER 
            {
              TypeIdentifier RESULT = null;
		int packleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int packright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeIdentifier pack = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new TypeIdentifier (pack, id, idright); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*Type_Id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Type_Id ::= IDENTIFIER 
            {
              TypeIdentifier RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new TypeIdentifier (lx (idleft, idright), id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*Type_Id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Call_Expression ::= IDENTIFIER LPAREN Expression_List RPAREN 
            {
              CallExpression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression[] args = (Expression[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new CallExpression (lx (idleft, rpright), id, args); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Call_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // New_Expression ::= NEW Type_Id LPAREN Expression_List RPAREN 
            {
              TupleExpression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Type_Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int Type_Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeIdentifier Type_Id = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression[] t = (Expression[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new TupleExpression (lx (nleft, rpright), Type_Id, t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*New_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Select_Mode ::= Select_Mode RUNNING 
            {
              Integer RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = m | SelectExpression.MODE_RUNNING; 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*Select_Mode*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Select_Mode ::= Select_Mode DISTINCT 
            {
              Integer RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = m | SelectExpression.MODE_DISTINCT; 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*Select_Mode*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Select_Mode ::= 
            {
              Integer RESULT = null;
		 RESULT = 0; 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*Select_Mode*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Select_Expression ::= SELECT Select_Mode Expression_List _aux_1 _aux_2 _aux_3 
            {
              SelectExpression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int selleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int selright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression[] sel = (Expression[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object src = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int filterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int filterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object filter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gbyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int gbyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object gby = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
            ArrayList <FieldIdentifier>     gl = (ArrayList <FieldIdentifier>) gby;

            RESULT =
                new SelectExpression (
                    lx (sleft, gbyright),
                    (Expression) src,
                    (Expression) filter,
                    m,
                    gby == null ? null : gl.toArray (new FieldIdentifier [gl.size ()]),
                    sel
                );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*Select_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _aux_3 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*_aux_3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _aux_3 ::= GROUP BY Field_List 
            {
              Object RESULT = null;
		int gbyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int gbyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ArrayList gby = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = gby; 
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*_aux_3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _aux_2 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*_aux_2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _aux_2 ::= WHERE Expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*_aux_2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _aux_1 ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(39/*_aux_1*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _aux_1 ::= FROM Expression 
            {
              Object RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression q = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = q; 
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*_aux_1*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Field_List ::= Field_List COMMA Field_Id 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FieldIdentifier id = (FieldIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add (id); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Field_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Field_List ::= Field_Id 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FieldIdentifier id = (FieldIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArrayList (); RESULT.add (id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*Field_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Non_Empty_Expression_List ::= Non_Empty_Expression_List COMMA Expression 
            {
              ArrayList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add (e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*Non_Empty_Expression_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Non_Empty_Expression_List ::= Expression 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArrayList (); RESULT.add (e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*Non_Empty_Expression_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression_List ::= Non_Empty_Expression_List 
            {
              Expression[] RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ArrayList list = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (Expression []) list.toArray (new Expression [list.size ()]); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*Expression_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression_List ::= 
            {
              Expression[] RESULT = null;
		 RESULT = new Expression [0]; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*Expression_List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arithmetic_Expression ::= LPAREN Expression RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arithmetic_Expression ::= STAR 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new This (lx (sleft, sright)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arithmetic_Expression ::= TRUE 
            {
              Expression RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BooleanConstant (lx (cleft, cright), true); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arithmetic_Expression ::= FALSE 
            {
              Expression RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BooleanConstant (lx (cleft, cright), false); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Arithmetic_Expression ::= Identifier 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = id; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Arithmetic_Expression ::= BIN_LITERAL 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinConstant (lx (sleft, sright), s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Arithmetic_Expression ::= CHAR_LITERAL 
            {
              Expression RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		char c = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new CharConstant (lx (cleft, cright), c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Arithmetic_Expression ::= TIME_LITERAL 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new TimeConstant (lx (sleft, sright), s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Arithmetic_Expression ::= DATE_LITERAL 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new DateConstant (lx (sleft, sright), s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Arithmetic_Expression ::= STRING 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new StringConstant (lx (sleft, sright), s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Arithmetic_Expression ::= FP 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = FloatConstant.parseText (lx (nleft, nright), n); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Arithmetic_Expression ::= UINT 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IntegerConstant (lx (nleft, nright), Long.parseLong (n)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Arithmetic_Expression ::= NULL 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Null (lx (nleft, nright)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Arithmetic_Expression ::= Arithmetic_Expression AS IDENTIFIER 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NamedExpression (lx (eleft, idright), e, id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Arithmetic_Expression ::= Arithmetic_Expression IS NOT NULL 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NullCheckExpression (lx (eleft, nright), e, false); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Arithmetic_Expression ::= Arithmetic_Expression IS NULL 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NullCheckExpression (lx (eleft, nright), e, true); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Arithmetic_Expression ::= Arithmetic_Expression IS Type_Id 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TypeIdentifier t = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new TypeCheckExpression (lx (eleft, tright), e, t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Arithmetic_Expression ::= MINUS Arithmetic_Expression 
            {
              Expression RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new UnaryMinusExpression (lx (mleft, eright), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Arithmetic_Expression ::= Call_Expression 
            {
              Expression RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		CallExpression c = (CallExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Arithmetic_Expression ::= New_Expression 
            {
              Expression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TupleExpression t = (TupleExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = t; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Arithmetic_Expression ::= Arithmetic_Expression SLASH Arithmetic_Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArithmeticExpression (lx (e1left, e2right), ArithmeticFunction.DIV, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Arithmetic_Expression ::= Arithmetic_Expression STAR Arithmetic_Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArithmeticExpression (lx (e1left, e2right), ArithmeticFunction.MUL, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Arithmetic_Expression ::= Arithmetic_Expression MINUS Arithmetic_Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArithmeticExpression (lx (e1left, e2right), ArithmeticFunction.SUB, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Arithmetic_Expression ::= Arithmetic_Expression PLUS Arithmetic_Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArithmeticExpression (lx (e1left, e2right), ArithmeticFunction.ADD, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Arithmetic_Expression ::= Type_Id COLON Field_Id 
            {
              Expression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeIdentifier t = (TypeIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FieldIdentifier f = (FieldIdentifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new FieldAccessExpression (lx (tleft, fright), t, f); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Arithmetic_Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= Expression UNION Expression 
            {
              Expression RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression q1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression q2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new UnionExpression (lx (q1left, q2right), q1, q2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= Expression NOT LIKE Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new LikeExpression (lx (e1left, e2right), e1, e2, true); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression LIKE Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new LikeExpression (lx (e1left, e2right), e1, e2, false); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression IN LPAREN Expression_List RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression[] args = (Expression[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new InExpression (lx (eleft, rpright), true, e, args); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression NOT IN LPAREN Expression_List RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression[] args = (Expression[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new InExpression (lx (eleft, rpright), false, e, args); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression LE Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new RelationExpression (lx (e1left, e2right), OrderRelation.LE, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= Expression LT Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new RelationExpression (lx (e1left, e2right), OrderRelation.LT, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression ::= Expression GE Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new RelationExpression (lx (e1left, e2right), OrderRelation.GE, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression ::= Expression GT Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new RelationExpression (lx (e1left, e2right), OrderRelation.GT, e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression ::= Expression NEQ Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new EqualsExpression (lx (e1left, e2right), e1, e2, false); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expression ::= Expression EQ Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new EqualsExpression (lx (e1left, e2right), e1, e2, true); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expression ::= NOT Expression 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NotExpression (lx (nleft, eright), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression ::= Expression AND Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new AndExpression (lx (e1left, e2right), e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expression ::= Expression OR Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new OrExpression (lx (e1left, e2right), e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expression ::= Select_Expression 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SelectExpression s = (SelectExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= Expression BETWEEN Arithmetic_Expression AND Arithmetic_Expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BetweenExpression (lx (e1left, e3right), e1, e2, e3); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression ::= Arithmetic_Expression 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Data_Definition_Statement ::= Drop_Stream_Statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DropStreamStatement s = (DropStreamStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Data_Definition_Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Data_Definition_Statement ::= Modify_Stream_Statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ModifyStreamStatement s = (ModifyStreamStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Data_Definition_Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Data_Definition_Statement ::= Create_Stream_Statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		CreateStreamStatement s = (CreateStreamStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*Data_Definition_Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Clause ::= X_TYPE Data_Type 
            {
              Element RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DataTypeSpec dt = (DataTypeSpec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = dt; 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*Clause*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Clause ::= Data_Definition_Statement 
            {
              Element RESULT = null;
		int ddlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int ddlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Statement ddl = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = ddl; 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*Clause*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Clause EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Clause ::= Expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*Clause*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

